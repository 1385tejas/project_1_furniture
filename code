# 0. Imports (common beginner pattern)
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

sns.set(style="whitegrid")
import warnings
warnings.filterwarnings("ignore")

# 1. Load data
def load_data(path='ecommerce_furniture_dataset_2024.csv'):
    df = pd.read_csv(path)
    print("Initial shape:", df.shape)
    return df

# 2. Clean & preprocess
def clean_data(df):
    # normalize column names
    df.columns = [c.strip().lower().replace(' ', '_') for c in df.columns]
    # Remove duplicates if any
    before = len(df)
    df = df.drop_duplicates()
    after = len(df)
    print(f"Dropped duplicates: {before - after}")

    # Convert price to numeric (remove $ and commas)
    df['price'] = df['price'].astype(str).replace('[\\$,]', '', regex=True)
    df['price'] = pd.to_numeric(df['price'], errors='coerce')

    # originalprice has many missing; drop it to keep it simple
    if 'originalprice' in df.columns:
        df = df.drop(columns=['originalprice'])

    # Fill missing tagText with placeholder
    df['tagtext'] = df['tagtext'].fillna('Unknown')

    # Basic cleaning done
    return df

# 3. Feature engineering
def add_features(df):
    # Simple discount-like feature is not available since originalPrice dropped.
    # We can create a flag for free shipping vs others (from the tag)
    df['free_shipping'] = df['tagtext'].apply(lambda x: 1 if 'Free shipping' in x else 0)
    # Log transform sold for modeling stability (optional)
    df['sold_log'] = np.log1p(df['sold'])
    return df

# 4. EDA plots
def eda_plots(df):
    # Distribution of sold
    plt.figure(figsize=(6,3))
    sns.histplot(df['sold'], kde=True)
    plt.title('Distribution of Sold')
    plt.tight_layout()
    plt.show()

    # Price vs sold scatter
    plt.figure(figsize=(6,4))
    sns.scatterplot(x='price', y='sold', data=df, alpha=0.6)
    plt.title('Price vs Sold')
    plt.tight_layout()
    plt.show()

    # TagText counts (simplified categories)
    plt.figure(figsize=(5,3))
    tag_counts = df['tagtext'].value_counts().head(5)
    sns.barplot(x=tag_counts.values, y=tag_counts.index)
    plt.title('Top TagText')
    plt.tight_layout()
    plt.show()

    # Free shipping effect
    plt.figure(figsize=(5,3))
    sns.boxplot(x='free_shipping', y='sold', data=df)
    plt.title('Sold by Free Shipping Flag')
    plt.tight_layout()
    plt.show()

# 5. Modeling
def model_and_evaluate(df):
    # Features: price and free_shipping
    X = df[['price', 'free_shipping']].copy()
    # If any missing in price, drop those rows for simplicity
    X = X.dropna()
    y = df.loc[X.index, 'sold']  # align

    # Split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Linear Regression
    lr = LinearRegression()
    lr.fit(X_train, y_train)
    pred_lr = lr.predict(X_test)
    mse_lr = mean_squared_error(y_test, pred_lr)
    r2_lr = r2_score(y_test, pred_lr)

    # Random Forest
    rf = RandomForestRegressor(n_estimators=100, random_state=42)
    rf.fit(X_train, y_train)
    pred_rf = rf.predict(X_test)
    mse_rf = mean_squared_error(y_test, pred_rf)
    r2_rf = r2_score(y_test, pred_rf)

    # Print results
    print("=== Model Evaluation ===")
    print(f"Linear Regression -> MSE: {mse_lr:.2f}, R2: {r2_lr:.3f}")
    print(f"Random Forest     -> MSE: {mse_rf:.2f}, R2: {r2_rf:.3f}")

    # Plot actual vs predicted for Random Forest (example)
    plt.figure(figsize=(6,4))
    plt.scatter(y_test, pred_rf, alpha=0.6)
    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
    plt.xlabel('Actual sold')
    plt.ylabel('Predicted sold')
    plt.title('Random Forest: Actual vs Predicted')
    plt.tight_layout()
    plt.show()

# 6. Main
if __name__ == '__main__':
    df = load_data('ecommerce_furniture_dataset_2024.csv')
    print("Columns:", df.columns.tolist())
    df = clean_data(df)
    df = add_features(df)
    print("\nBasic Info:")
    print(df[['price', 'sold', 'free_shipping']].describe())
    eda_plots(df)
    model_and_evaluate(df)
